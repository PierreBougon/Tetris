==3426== Memcheck, a memory error detector
==3426== Copyright (C) 2002-2013, and GNU GPL'd, by Julian Seward et al.
==3426== Using Valgrind-3.10.1 and LibVEX; rerun with -h for copyright info
==3426== Command: ./tetris
==3426== Parent PID: 2499
==3426== 
==3426== Conditional jump or move depends on uninitialised value(s)
==3426==    at 0x404267: my_realloc (get_nl.c:22)
==3426==    by 0x404522: fill_line (get_nl.c:79)
==3426==    by 0x404651: get_next_line (get_nl.c:108)
==3426==    by 0x402872: fill_tetri_carac (init_tetri.c:48)
==3426==    by 0x402A49: fill_tetri (init_tetri.c:90)
==3426==    by 0x402BDC: init_tetriminos (init_tetri.c:135)
==3426==    by 0x401FFD: init_data (fct_main.c:15)
==3426==    by 0x401E91: main (tetris.c:64)
==3426== 
==3426== Invalid write of size 1
==3426==    at 0x404EE9: turn_tetri (actions.c:36)
==3426==    by 0x401CE3: get_key (tetris.c:24)
==3426==    by 0x401DE5: main_loop (tetris.c:47)
==3426==    by 0x401FD7: config (error.c:36)
==3426==    by 0x401EAC: main (tetris.c:66)
==3426==  Address 0x1 is not stack'd, malloc'd or (recently) free'd
==3426== 
==3426== 
==3426== Process terminating with default action of signal 11 (SIGSEGV)
==3426==  Access not within mapped region at address 0x1
==3426==    at 0x404EE9: turn_tetri (actions.c:36)
==3426==    by 0x401CE3: get_key (tetris.c:24)
==3426==    by 0x401DE5: main_loop (tetris.c:47)
==3426==    by 0x401FD7: config (error.c:36)
==3426==    by 0x401EAC: main (tetris.c:66)
==3426==  If you believe this happened as a result of a stack
==3426==  overflow in your program's main thread (unlikely but
==3426==  possible), you can try to increase the size of the
==3426==  main thread stack using the --main-stacksize= flag.
==3426==  The main thread stack size used in this run was 8388608.
==3426== 
==3426== HEAP SUMMARY:
==3426==     in use at exit: 200,108 bytes in 9,320 blocks
==3426==   total heap usage: 21,108 allocs, 11,788 frees, 343,150 bytes allocated
==3426== 
==3426== LEAK SUMMARY:
==3426==    definitely lost: 120,680 bytes in 8,801 blocks
==3426==    indirectly lost: 0 bytes in 0 blocks
==3426==      possibly lost: 0 bytes in 0 blocks
==3426==    still reachable: 79,428 bytes in 519 blocks
==3426==         suppressed: 0 bytes in 0 blocks
==3426== Rerun with --leak-check=full to see details of leaked memory
==3426== 
==3426== For counts of detected and suppressed errors, rerun with: -v
==3426== Use --track-origins=yes to see where uninitialised values come from
==3426== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
